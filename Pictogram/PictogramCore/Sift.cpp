//
//  Sift.cpp
//  Pictogram
//
//  Created by Chat F Mak on 5/16/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#include <iostream>
#include "Sift.h"
#include "Keypoint.h"

Sift::Sift()
{
    
}

void Sift::GetDescriptor(Keypoint kp, cv::Mat integralBoxImage, SiftDescriptor* desc)
{   
    int dSize = DescriptorSize[kp.lv];
    float scale = dSize/17.0f;
    int tlx = kp.x - DescriptorSize[kp.lv]/2;
    int tly = kp.y - DescriptorSize[kp.lv]/2;
    
    //        float[][][] gradient = new float[16][16][2];
    float t1 = 2.41421356237310f;
    float t2 = 0.414213562373095f;
    for(int i=0;i<16;i++)
    {
        for(int j=0; j<16; j++)
        {
            float dx = SmoothePixel(round((j+1)*scale)+tlx,
                                    round(i*scale)+tly,
                                    kp.lv,
                                    integralBoxImage) - 
            SmoothePixel(round(j*scale)+tlx,
                         round(i*scale)+tly,
                         kp.lv,
                         integralBoxImage);
            float dy = SmoothePixel(round(j*scale)+tlx,
                                    round((i+1)*scale)+tly,
                                    kp.lv,
                                    integralBoxImage) - 
            SmoothePixel(round(j*scale)+tlx,
                         round(i*scale)+tly,
                         kp.lv,
                         integralBoxImage);
            
            float tangent = FLT_MAX;
            if(fabs(dx)>0)
                tangent = dy/dx;
            
            int bin = 0;
            if(tangent > -t1 && tangent < -t2)
            {
                if(dy>0)    bin=3;
                else        bin=7;
            }
            else if(tangent > -t2 && tangent < t2)
            {
                if(dx>0)    bin=0;
                else        bin=4;
            }
            else if(tangent > t2 && tangent < t1)
            {
                if(dy>0)    bin=1;
                else        bin=5;
            }
            else
            {
                if(dy>0)    bin=2;
                else        bin=6;
            }
            
            desc->HistogramAccumulate(j, i, bin, weight[i][j]);
        }
    }
    desc->Normalize();
    
//    desc.HammingEmbedding();
    return desc;
}

float Sift::SmoothePixel(int tlx, int tly, int lv, cv::Mat integralBoxImage)
{    
    int w = DescriptorSize[lv]/16-1;
    int ymin = tly;
    int xmin = tlx;
    
    if(ymin<-1 || xmin<-1 || 
       xmin+w>=integralBoxImage.size().width || ymin+w>=integralBoxImage.size().height)
    {
        printf("[%d,%d], %d\n",xmin,ymin,lv);
        return 0;
    }
    
    float p = integralBoxImage.at<int>(ymin+w,xmin+w);
    if(xmin>=0)
        p -= integralBoxImage.at<int>(ymin+w,xmin);
    if(ymin>=0)
        p -= integralBoxImage.at<int>(ymin,xmin+w);
    if(xmin>=0 && ymin>=0)
        p += integralBoxImage.at<int>(ymin,xmin);
    return p / ((w+1)*(w+1));
}


float Sift::weight[][16] = 
    {{0.0207069409176241f, 0.0231002618762486f, 0.0253706743559032f, 0.0274322397275675f, 0.0292014671857020f, 0.0306028748562997f, 0.0315743143835072f, 0.0320715374852431f, 0.0320715374852431f, 0.0315743143835072f, 0.0306028748562997f, 0.0292014671857020f, 0.0274322397275675f, 0.0253706743559032f, 0.0231002618762486f, 0.0207069409176241f},
    {0.0231002618762486f, 0.0257702043423077f, 0.0283030324918528f, 0.0306028748562997f, 0.0325765907114877f, 0.0341399739420177f, 0.0352236930468679f, 0.0357783855003168f, 0.0357783855003168f, 0.0352236930468679f, 0.0341399739420177f, 0.0325765907114877f, 0.0306028748562997f, 0.0283030324918528f, 0.0257702043423077f, 0.0231002618762486f},
    {0.0253706743559032f, 0.0283030324918528f, 0.0310848000114515f, 0.0336106827053739f, 0.0357783855003168f, 0.0374954260710144f, 0.0386856586601391f, 0.0392948691392030f, 0.0392948691392030f, 0.0386856586601391f, 0.0374954260710144f, 0.0357783855003168f, 0.0336106827053739f, 0.0310848000114515f, 0.0283030324918528f, 0.0253706743559032f},
    {0.0274322397275675f, 0.0306028748562997f, 0.0336106827053739f, 0.0363418130888779f, 0.0386856586601391f, 0.0405422221829126f, 0.0418291704625840f, 0.0424878840494515f, 0.0424878840494515f, 0.0418291704625840f, 0.0405422221829126f, 0.0386856586601391f, 0.0363418130888779f, 0.0336106827053739f, 0.0306028748562997f, 0.0274322397275675f},
    {0.0292014671857020f, 0.0325765907114877f, 0.0357783855003168f, 0.0386856586601391f, 0.0411806692833058f, 0.0431569708659272f, 0.0445269201785512f, 0.0452281171417857f, 0.0452281171417857f, 0.0445269201785512f, 0.0431569708659272f, 0.0411806692833058f, 0.0386856586601391f, 0.0357783855003168f, 0.0325765907114877f, 0.0292014671857020f},
    {0.0306028748562997f, 0.0341399739420177f, 0.0374954260710144f, 0.0405422221829126f, 0.0431569708659272f, 0.0452281171417857f, 0.0466638116946345f, 0.0473986598027456f, 0.0473986598027456f, 0.0466638116946345f, 0.0452281171417857f, 0.0431569708659272f, 0.0405422221829126f, 0.0374954260710144f, 0.0341399739420177f, 0.0306028748562997f},
    {0.0315743143835072f, 0.0352236930468679f, 0.0386856586601391f, 0.0418291704625840f, 0.0445269201785512f, 0.0466638116946345f, 0.0481450800847187f, 0.0489032547757755f, 0.0489032547757755f, 0.0481450800847187f, 0.0466638116946345f, 0.0445269201785512f, 0.0418291704625840f, 0.0386856586601391f, 0.0352236930468679f, 0.0315743143835072f},
    {0.0320715374852431f, 0.0357783855003168f, 0.0392948691392030f, 0.0424878840494515f, 0.0452281171417857f, 0.0473986598027456f, 0.0489032547757755f, 0.0496733689809248f, 0.0496733689809248f, 0.0489032547757755f, 0.0473986598027456f, 0.0452281171417857f, 0.0424878840494515f, 0.0392948691392030f, 0.0357783855003168f, 0.0320715374852431f},
    {0.0320715374852431f, 0.0357783855003168f, 0.0392948691392030f, 0.0424878840494515f, 0.0452281171417857f, 0.0473986598027456f, 0.0489032547757755f, 0.0496733689809248f, 0.0496733689809248f, 0.0489032547757755f, 0.0473986598027456f, 0.0452281171417857f, 0.0424878840494515f, 0.0392948691392030f, 0.0357783855003168f, 0.0320715374852431f},
    {0.0315743143835072f, 0.0352236930468679f, 0.0386856586601391f, 0.0418291704625840f, 0.0445269201785512f, 0.0466638116946345f, 0.0481450800847187f, 0.0489032547757755f, 0.0489032547757755f, 0.0481450800847187f, 0.0466638116946345f, 0.0445269201785512f, 0.0418291704625840f, 0.0386856586601391f, 0.0352236930468679f, 0.0315743143835072f},
    {0.0306028748562997f, 0.0341399739420177f, 0.0374954260710144f, 0.0405422221829126f, 0.0431569708659272f, 0.0452281171417857f, 0.0466638116946345f, 0.0473986598027456f, 0.0473986598027456f, 0.0466638116946345f, 0.0452281171417857f, 0.0431569708659272f, 0.0405422221829126f, 0.0374954260710144f, 0.0341399739420177f, 0.0306028748562997f},
    {0.0292014671857020f, 0.0325765907114877f, 0.0357783855003168f, 0.0386856586601391f, 0.0411806692833058f, 0.0431569708659272f, 0.0445269201785512f, 0.0452281171417857f, 0.0452281171417857f, 0.0445269201785512f, 0.0431569708659272f, 0.0411806692833058f, 0.0386856586601391f, 0.0357783855003168f, 0.0325765907114877f, 0.0292014671857020f},
    {0.0274322397275675f, 0.0306028748562997f, 0.0336106827053739f, 0.0363418130888779f, 0.0386856586601391f, 0.0405422221829126f, 0.0418291704625840f, 0.0424878840494515f, 0.0424878840494515f, 0.0418291704625840f, 0.0405422221829126f, 0.0386856586601391f, 0.0363418130888779f, 0.0336106827053739f, 0.0306028748562997f, 0.0274322397275675f},
    {0.0253706743559032f, 0.0283030324918528f, 0.0310848000114515f, 0.0336106827053739f, 0.0357783855003168f, 0.0374954260710144f, 0.0386856586601391f, 0.0392948691392030f, 0.0392948691392030f, 0.0386856586601391f, 0.0374954260710144f, 0.0357783855003168f, 0.0336106827053739f, 0.0310848000114515f, 0.0283030324918528f, 0.0253706743559032f},
    {0.0231002618762486f, 0.0257702043423077f, 0.0283030324918528f, 0.0306028748562997f, 0.0325765907114877f, 0.0341399739420177f, 0.0352236930468679f, 0.0357783855003168f, 0.0357783855003168f, 0.0352236930468679f, 0.0341399739420177f, 0.0325765907114877f, 0.0306028748562997f, 0.0283030324918528f, 0.0257702043423077f, 0.0231002618762486f},
    {0.0207069409176241f, 0.0231002618762486f, 0.0253706743559032f, 0.0274322397275675f, 0.0292014671857020f, 0.0306028748562997f, 0.0315743143835072f, 0.0320715374852431f, 0.0320715374852431f, 0.0315743143835072f, 0.0306028748562997f, 0.0292014671857020f, 0.0274322397275675f, 0.0253706743559032f, 0.0231002618762486f, 0.0207069409176241f}};

int Sift::DescriptorSize[8] = {16,20,24,28,40,48,64,85};